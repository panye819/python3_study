视图View：接收请求，逻辑处理，调用数据，输出响应

配置URL：在应用中配置正则URL（正则表达式，视图的名称）

模型Model：负责与数据库交互
            面向对象：模型对象，列表
            定义模型类：
                指定属性及类型，以确定表的结构，迁移
            后台管理：
                创建管理员，启动服务器，admin，注册admin.py，完成表的增删改查

模板Template:
        定义显示的样式
        加载：读取文件的内容到内存
        渲染：

开发流程：
    step1：创建虚拟环境
    step2：安装django
    step3：创建项目
    step4：创建应用
    step5：在models.py里定义模型类
            生成迁移文件
            利用迁移文件生产相关表
    step6：定义视图
    step7：配置URL
    step8：创建模板


ORM(Object,relation,mapping),它实现了数据模型与数据库的解耦，及数据模型的而设计不需要依赖特定的数据库，
通过简单的配置就可以轻松更换数据库。
    主要任务：
        根据对象的类型生成表结构
        将对象、列表的操作，转化为SQL语句
        将SQL查询到的结果转换为对象、列表
    优点：
        极大的减轻了开发人员的工作量，不需要面对因数据库变更而导致的无效劳动
        Django中的模型包含存储数据的字段和约束，对应着数据库中唯一的表

    字段类型：
        AutoField：一个根据实际ID自动增长的IntegerField，通常不指定
        BooleanField：true/false字段
        CharField：字符串，默认表单样式是TextInput
        TextField：大文本字段，一般超过4000使用，默认的表单空间是TextArea
        IntegerField：整数
        DecimalField：使用Python的decimal实例表示的十进制浮点数
            DecimalField.max_digits：位数总数
            DecimalField.decimal_places：小数点后的数字位数
        FloatField：用Python的float实例来表示的浮点数
        DateField：使用Python的datetime.date实例表示的日期
            参数DateFiled.auto_now：每次保存对象时，自动设置该字段为当前时间，用于"最后一次修改"的时间戳
        FileField：一个上传文件的字段
        ImageField：继承了FileField的所有属性和方法，但对上传的对象进行校验，确保它是个有效的image

    关系：
        关系的类型包括：
            ForeignKey：一对多，将字段定义在多的端中
            ManyToManyField：多对多，将字段定在两端中
            OneToOneField：一对一，将字段定义在任意一端中
        可以维护递归的关联关系，使用self制度
        用一访问多：对象.模型类(小写)_set
    管理器是Django的模型进行数据库的查询操作的接口，Django应用的每个模型都拥有至少一个管理器
        自定义管理器类主要用于两种情况
            情况一：向管理器类中添加额外的方法：见下面“创建对象”中的方式二
            情况二：修改管理器返回的原始查询集：重写get_queryset()方法
    查询集
        在管理器上调用过滤器方法会返回查询集
        查询集经过过滤器筛选后返回新的查询集，因此可以写成链式过滤
        惰性执行：创建查询集不会带来任何数据库的访问，直到调用数据时，才会访问数据库
        何时对查询集求值：迭代，序列化，与if合用
        返回查询集的方法，称为过滤器
        all()
        filter()
        exclude()
        order_by()
        values()：一个对象构成一个字典，然后构成一个列表返回
        返回单个值的方法
            get()：返回单个满足条件的对象
            如果未找到会引发"模型类.DoesNotExist"异常
            如果多条被返回，会引发"模型类.MultipleObjectsReturned"异常
            count()：返回当前查询的总条数
            first()：返回第一个对象
            last()：返回最后一个对象
            exists()：判断查询集中是否有数据，如果有则返回True
        限制查询集
            查询集返回列表，可以使用下标的方式进行限制，等同于sql中的limit和offset子句
            注意：不支持负数索引
            使用下标后返回一个新的查询集，不会立即执行查询
            如果获取一个对象，直接使用[0]，等同于[0:1].get()，但是如果没有数据，[0]引发IndexError异常，[0:1].get()引发DoesNotExist异常
